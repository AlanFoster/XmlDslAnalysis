{
  classHeader = "ClassHeader.txt"

  // Represents the generated parser class
  parserClass="foo.language.CamelLanguageParser"
  parserUtilClass="foo.language.implementation.parsing.CamelLanguageParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  // Generated
  psiClassPrefix="Camel"
  psiImplClassSuffix="Impl"
  psiPackage="foo.language.psi"
  psiImplPackage="foo.language.psi.impl"

  elementTypeHolderClass="foo.language.CamelTypes"

  // Existing files
  elementTypeClass="foo.language.elements.CamelElementType"
  tokenTypeClass="foo.language.elements.CamelTokenType"

  // Overlaps jobs with the job of the lexer ?...
  tokens = [
    FUNC_BEGIN="${"
    FUNC_END="}"

    DOT="."
    QUESTION_MARK="?"
    COMMA=","

    LEFT_PAREN="("
    RIGHT_PAREN=")"

    LEFT_SQUARE_BRACE="["
    RIGHT_SQUARE_BRACE="]"

    // Operators
    GT_EQ=">="
    GT=">"

    LT_EQ="<="
    LT="<"

    EQ_EQ="=="

    AND_AND="&&"
    OR_OR="||"


    IDENTIFIER="regexp:[a-zA-Z]([a-zA-Z_0-9])*"

    NUMBER="regexp:\d+"

    STRING="regexp:\"[^\"]+\"|'[^\']+'"

    // Consume all text but a FUNC_BEGIN
    // ie the string "hello ${body.name}" should consume "hello "
   // PLAINTEXT="regexp:((?!\$\{).)+"
  ]
}

// The main entry point to the grammar
camel_file ::= camelInterpolation*

// A valid camel string is an interpolation of normal text plus camel expressions  - ie `Hello ${body.name}
private camelInterpolation ::=  camel_expression

// A top level expression, IE useful as a RHS of a binary expression ie ${body} == RHS
expression ::= camel_expression | literal

// Represents literals, ie numbers, strings
literal ::= NUMBER | STRING

// A top level Camel expression such as `${foo} == ${bar}`
camel_expression ::=
    camel_function operator expression (logic_operator camel_expression)*
    | camel_function

// The union of all possible operators
operator ::= binary_operator | logic_operator

private logic_operator ::=
    AND_AND | OR_OR
private binary_operator ::=
    GT_EQ | GT
    | LT_EQ | LT
    | EQ_EQ

camel_function ::= FUNC_BEGIN camel_func_body FUNC_END

// A camel function ${...} which can support the notation such as variable Access, function calls, bean ref etc
camel_func_body ::= functionCall | variableAccess

variableAccess ::=
    (arrayAccess | identifierAccess)
    // Allow for object access to support both a.b and a?.b for null safe access
    (QUESTION_MARK? DOT variableAccess)*

// Represents a Camel Function call - IE ${foo(1, ..., n)}
functionCall ::= IDENTIFIER LEFT_PAREN functionArgs? RIGHT_PAREN
functionArgs ::= functionArg (COMMA functionArg)*
functionArg ::= literal | FQCN

// Fully Qualfied class name, IE foo.bar.baz.Qux
FQCN ::= IDENTIFIER (DOT IDENTIFIER)*

private identifierAccess ::=
    IDENTIFIER

private arrayAccess ::=
    IDENTIFIER arrayOrMapIndices

private arrayOrMapIndices ::=
    LEFT_SQUARE_BRACE (NUMBER | STRING | variableAccess) RIGHT_SQUARE_BRACE
