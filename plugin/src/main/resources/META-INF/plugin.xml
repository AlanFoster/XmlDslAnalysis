<idea-plugin version="2">
  <id>foo.initial</id>
  <name>StaticAnalysis</name>
  <version>1.0</version>

  <description><![CDATA[
      Provides static analysis for the XML DSL provided by Apache Camel.<br>
      ]]></description>

  <change-notes><![CDATA[
      Initial investigation.
      ]]>
  </change-notes>


  <idea-version since-build="107.105"/>

  <application-components>

  </application-components>

  <project-components>
<!--      <component>
          <implementation-class>foo.language.debugger.DebuggerHackTest</implementation-class>
      </component>-->
  </project-components>

  <actions>

  </actions>

  <extensions defaultExtensionNs="com.intellij">
      <!-- Start Apache Camel Language Support -->
          <!--
            Register the Apache Camel Language
          -->
          <fileTypeFactory implementation="foo.language.Core.CamelFileTypeFactory"/>

          <!--
            Register the parser definition which performs the role of creating a lexer, and parser.
            And with the given AST tree will create the PSI elements etc
          -->
          <lang.parserDefinition language="Camel" implementationClass="foo.language.parser.CamelParserDefinition" />

            <!--
                Color Highlighting
            -->
            <lang.syntaxHighlighterFactory key="Camel" implementationClass="foo.language.Highlighting.CamelSyntaxHighlighterFactory" />


            <!--
                Color Highlighting editing
            -->
            <colorSettingsPage implementation="foo.language.Highlighting.CamelColorSettingsPage" />

            <!--
                Basic Code completion for core apache camel variables
            -->
            <completion.contributor language="Camel" implementationClass="foo.language.completion.CamelVariableCompletionContributor" />


            <!-- Brace Matching -->
            <lang.braceMatcher language="Camel" implementationClass="foo.language.formatting.CamelBraceMatcher" />

            <!-- Show hint for function completion -->
            <codeInsight.parameterInfo language="Camel" implementationClass="foo.language.CamelParameterInfoHandler" />

            <!--
                Annotators for camel functions are called as expected
            -->
            <annotator language="Camel" implementationClass="foo.language.annotators.CamelArgumentAnnotator"/>
            <annotator language="Camel" implementationClass="foo.language.annotators.CamelFunctionAnnotator"/>
            <annotator language="Camel" implementationClass="foo.language.Highlighting.CamelComplexElementAnnotator"/>

            <!-- Language Injector - Ensure that we have injected the camel language into the appropriate places -->
            <languageInjector implementation="foo.language.CamelSimpleLanguageInjector" />

            <!-- Annotator for unresolved class names -->
            <annotator language="Camel" implementationClass="foo.language.annotators.UnresolvedReferenceAnnotator" />

            <!-- Quote Handler - Comments added to the top of the CamelQuoteHandler class as to why this is registered -->
            <quoteHandler fileType="Camel" className="foo.language.formatting.CamelQuoteHandler" />

            <!--
                Header reference contributions within the simple language
            -->
            <psi.referenceContributor implementation="foo.language.references.header.CamelHeaderReferenceContributor"/>


            <!--
                Body Reference within camel, ie ${in.body<caret>} support
            -->
            <psi.referenceContributor implementation="foo.language.references.body.CamelBodyReferenceContributor" />

            <!--
                Allows inplace renaming of identity elements
            -->
<!--            <lang.refactoringSupport language="Camel" implementationClass="foo.language.references.CamelRefactoringSupportProvider"/>-->

        <!-- Providing attributes for schemes -->
        <additionalTextAttributes scheme="Default" file="colorSchemes/CamelDefaultTextAttributes.xml" />



      <!-- End Apache Camel Language Support -->

      <!--
        Represents the top level blueprint DOM description, which provides an abstraction layer
        for interacting with XML - rather than having to deal with null possible PSI elements
      -->
      <dom.fileDescription id="BlueprintDom" implementation="foo.dom.BlueprintDomFile"/>

      <!-- Provide an implementation for expression elements -->
      <dom.implementation
            interfaceClass="foo.dom.Model.ExpressionDefinition"
            implementationClass="foo.dom.Model.impl.ExpressionDefinitionImpl" />

      <!--
        Provide error highlighting within the DOM model.
        Note this hooks into the DOM model metadata, ie annotations such as @Required etc.
      -->
      <localInspection
              language="XML" enabledByDefault="true" level="ERROR"
              groupName="Blueprint" displayName="Blueprint Basic Error Highlighting"
              implementationClass="foo.dom.inspections.BlueprintDomElementInspector"/>

      <!--
          Represents the EIP Editor functionality within a Dom tree
        -->
      <fileEditorProvider implementation="foo.eip.editor.EipEditorProvider" />


      <!--            <debugger.breakpointFactory implementation="foo.language.debugger.CamelBreakpointFactory" />-->

      <!--
        Debugging Support for blueprint
        An initial attempt to place breakpoints within the /EIP/ elements, to help debug in terms of DSL
        rather than the concrete java implementation
      -->
<!--      <xdebugger.debuggerSupport implementation=""-->

     <!--
         Defines a breakpoint, which allows the user to place a breakpoint within a valid blueprint route.
         Note this breakpoint by itself will do nothing other than place the icon where appropriate etc
     -->
<!--      <xdebugger.breakpointType implementation="foo.language.debugger.BlueprintBreakpointType" />-->

<!--      <programRunner implementation="foo.language.debugger.BlueprintDebugRunner"-->
<!--
      <debugger.positionManagerFactory implementation="foo.language.debugger.CamelPositionManagerFactory" />-->

<!--    <programRunner implementation="foo.language.debugger.CamelProgramRunner" />-->
<!--      <configurationType implementation="foo.language.debugger.CamelConfigurationType" />-->

  </extensions>
</idea-plugin>