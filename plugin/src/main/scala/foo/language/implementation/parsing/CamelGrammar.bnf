{
  classHeader = "ClassHeader.txt"

  psiImplUtilClass="foo.language.psi.Util"

  // Represents the generated parser class
  parserClass="foo.language.generated.CamelLanguageParser"
  parserUtilClass="foo.language.implementation.parsing.CamelLanguageParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  // Generated Details
  psiClassPrefix="Camel"
  psiImplClassSuffix="Impl"
  psiPackage="foo.language.generated.psi"
  psiImplPackage="foo.language.generated.psi.impl"

  elementTypeHolderClass="foo.language.generated.CamelTypes"

  // Existing files
  elementTypeClass="foo.language.elements.CamelElementType"
  tokenTypeClass="foo.language.elements.CamelTokenType"

  // Overlaps jobs with the job of the lexer - as this file can generate a lexer, and give live-preview support
  tokens = [
    FUNC_BEGIN="${"
    FUNC_END="}"

    DOT="."
    QUESTION_MARK="?"
    COMMA=","

    LEFT_PAREN="("
    RIGHT_PAREN=")"

    LEFT_SQUARE_BRACE="["
    RIGHT_SQUARE_BRACE="]"

    // Operators
    GT_EQ=">="
    GT=">"

    LT_EQ="<="
    LT="<"

    EQ_EQ="=="

    AND_AND="&&"
    OR_OR="||"

    IDENTIFIER="regexp:[a-zA-Z_$]([a-zA-Z_$0-9])*"

    NUMBER="regexp:\d+"

    STRING="regexp:\"[^\"]*\"?|'[^\']*'?"

    // Consume all text but a FUNC_BEGIN
    // ie the string "hello ${body.name}" should consume "hello "
   // PLAINTEXT="regexp:((?!\$\{).)+"
  ]
}

// The main entry point to the grammar - Note doesn't support arbitrary english/string interpolation
camel_file ::= camelInterpolation*

// A valid camel string is an interpolation of normal text plus camel expressions  - ie `Hello ${body.name}
private camelInterpolation ::=  expression

// A top level expression, IE useful as a RHS of a binary expression ie ${body} == RHS
expression ::=  camel_expression | literal

// Represents literals, ie numbers, strings
literal ::= NUMBER | STRING

// A top level Camel expression such as `${foo} == ${bar}`
camel_expression ::=
    camel_function operator expression (logic_operator camel_expression)*
    | camel_function

// The union of all possible operators
operator ::= binary_operator | logic_operator

private logic_operator ::=
    AND_AND | OR_OR
private binary_operator ::=
    GT_EQ | GT
    | LT_EQ | LT
    | EQ_EQ

camel_function ::= FUNC_BEGIN camel_func_body FUNC_END

// A camel function ${...} which can support the notation such as variable Access, function calls, bean ref etc
camel_func_body ::= functionCall | variableAccess {
    // Provide a mixin for this PSI element -- affects code generation
    mixin="foo.language.psi.impl.ICamelCamelFuncBodyImpl"
    implements="foo.language.psi.ICamelCamelFuncBody"
}

variableAccess ::=
    (arrayAccess | identifierAccess)
    // Allow for object access to support both a.b and a?.b for null safe access
    (QUESTION_MARK? DOT variableAccess)* {
    mixin="foo.language.psi.impl.ACamelVariableAccessImpl"
    implements="foo.language.psi.IACamelVariableAccess"
}

// Represents a Camel Function call - IE ${foo(1, ..., n)}
functionCall ::= functionName LEFT_PAREN functionArgs? RIGHT_PAREN
functionArgs ::= functionArg (functionArgTail)* // IE func(first (, tail)*)
// Pin 1 - Error recovery, the functionArg tail is considered successful if we at least have a comma
private functionArgTail ::= COMMA functionArg {pin=1}
functionArg ::= literal | FQCN | camel_function

functionName ::= IDENTIFIER

// Fully Qualfied class name, IE foo.bar.baz.Qux
FQCN ::= IDENTIFIER (DOT IDENTIFIER)* {
    // Provide a mixin for this PSI element -- affects code generation
    mixin="foo.language.psi.impl.CamelJavaFQCN"
    implements="foo.language.psi.ICamelJavaFQCN"
}

private identifierAccess ::=
    IDENTIFIER

private arrayAccess ::=
    IDENTIFIER arrayOrMapIndices

// Can be written as LEFT_SQUARE_BRACE (identifierAccess | expression)
private arrayOrMapIndices ::=
    LEFT_SQUARE_BRACE (NUMBER | STRING | variableAccess) RIGHT_SQUARE_BRACE