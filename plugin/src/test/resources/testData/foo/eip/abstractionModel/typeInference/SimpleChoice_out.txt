Route(
     From(Some(direct:start),DomReference(FromProcessorDefinition),Inferred(TypeEnvironment(Set(java.lang.Object),Map()),TypeEnvironment(Set(java.lang.Object),Map())))
     To(Some(direct:foo),DomReference(ToProcessorDefinition),Inferred(TypeEnvironment(Set(java.lang.Object),Map()),TypeEnvironment(Set(java.lang.Object),Map())))
     Choice{ 
          (Set(java.lang.Object), Map())
          (Set(java.lang.Object), Map())
     }(
          When(Simple(true,Some(java.lang.Boolean),ExpressionReference(XmlTag:simple))){ 
               (Set(java.lang.Object), Map())
               (Set(java.lang.Object), Map())
          }(
               To(Some(uri:firstChoiceProcessor),DomReference(ToProcessorDefinition),Inferred(TypeEnvironment(Set(java.lang.Object),Map()),TypeEnvironment(Set(java.lang.Object),Map())))
          )
          When(Simple(false,None,ExpressionReference(XmlTag:simple))){ 
               (Set(java.lang.Object), Map())
               (Set(java.lang.Object), Map())
          }(
               To(Some(uri:secondChoiceProcessor),DomReference(ToProcessorDefinition),Inferred(TypeEnvironment(Set(java.lang.Object),Map()),TypeEnvironment(Set(java.lang.Object),Map())))
               To(Some(uri:thirdChoiceProcessor),DomReference(ToProcessorDefinition),Inferred(TypeEnvironment(Set(java.lang.Object),Map()),TypeEnvironment(Set(java.lang.Object),Map())))
          )
     )
     To(Some(direct:bar),DomReference(ToProcessorDefinition),Inferred(TypeEnvironment(Set(java.lang.Object),Map()),TypeEnvironment(Set(java.lang.Object),Map())))
)