Route(
     From(Some(direct:start),DomReference(FromProcessorDefinition),Inferred(TypeEnvironment(Set(java.lang.Object),Map()),TypeEnvironment(Set(java.lang.Object),Map())))
     Bean(Some(orderFactory),Some(createOrder),DomReference(BeanDefinition),Inferred(TypeEnvironment(Set(java.lang.Object),Map()),TypeEnvironment(Set(foo.models.OrderModel),Map())))
     SetHeader(Some(aConstant),Constant(a),DomReference(ExpressionDefinitionImpl),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map()),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     SetHeader(Some(bConstant),Constant(b),DomReference(ExpressionDefinitionImpl),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     SetHeader(Some(simpleHeader),Constant(a),DomReference(ExpressionDefinitionImpl),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     RemoveHeader(None,DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     RemoveHeader(None,DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     RemoveHeader(Some(),DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     RemoveHeader(Some(Constant),DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     RemoveHeader(Some(b),DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     RemoveHeader(Some(bConstant),DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), bConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     Choice{ 
          (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))
          (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))
     }(
          When(Constant(true)){ 
               (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))
               (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))
          }(
               SetHeader(Some(unionInformation),Simple(${body},None,ExpressionReference(XmlTag:simple)),DomReference(ExpressionDefinitionImpl),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))))
          )
          When(Constant(true)){ 
               (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))
               (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))
          }(
               RemoveHeader(Some(simpleHeader),DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
          )
     )
     SetHeader(Some(beforeChoice),Constant(true),DomReference(ExpressionDefinitionImpl),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))))
     Choice{ 
          (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))
          (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), other -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))
     }(
          When(Simple(${headers.beforeChoice},None,ExpressionReference(XmlTag:simple))){ 
               (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))
               (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), other -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))
          }(
               SetHeader(Some(other),Simple(${body},None,ExpressionReference(XmlTag:simple)),DomReference(ExpressionDefinitionImpl),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), other -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))))
               RemoveHeader(Some(beforeChoice),DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), other -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), other -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))))
          )
          When(Simple(${headers.beforeChoice},None,ExpressionReference(XmlTag:simple))){ 
               (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl))))
               (Set(foo.models.OrderModel), Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))
          }(
               RemoveHeader(Some(beforeChoice),DomReference(RemoveHeaderProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))))
          )
     )
     To(Some(direct:bar),DomReference(ToProcessorDefinition),Inferred(TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), other -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)))),TypeEnvironment(Set(foo.models.OrderModel),Map(aConstant -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), simpleHeader -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), unionInformation -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl)), beforeChoice -> (java.lang.String,DomReference(ExpressionDefinitionImpl)), other -> (foo.models.OrderModel,DomReference(ExpressionDefinitionImpl))))))
)